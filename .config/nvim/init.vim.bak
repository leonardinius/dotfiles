set nocompatible
filetype off

" Plugin manager
" https://github.com/junegunn/vim-plug

call plug#begin('~/.config/nvim/plugged')

  " git support, status bar
  Plug 'tpope/vim-fugitive'
  Plug 'airblade/vim-gitgutter'

  " airline below
  Plug 'bling/vim-airline'

  " common sense vim seetings (backspace key etc ..)
  Plug 'tpope/vim-sensible'
  " Makes . repeat last map not only last command
  Plug 'tpope/vim-repeat'

  " file panel
  Plug 'scrooloose/nerdtree'
  Plug 'jistr/vim-nerdtree-tabs'
  " file search/lookup
  Plug 'kien/ctrlp.vim'
  " autosave on buffer changes
  Plug '907th/vim-auto-save'
  " autowrap as you type plugin
  Plug 'reedes/vim-pencil'
  " zooms on + / -
  Plug 'vim-scripts/zoom.vim'
  " cursor enchancement
  Plug 'jszakmeister/vim-togglecursor'
  " editorconfig support (google it)
  Plug 'editorconfig/editorconfig-vim'

  " " rust auto complete support
  " Plug 'phildawes/racer'

  "Nvim asynchronous make / syntax check
  Plug 'benekastah/neomake'

  " Ctags support, including Rust
  " Plug 'majutsushi/tagbar'
  " " Autocomplete

  Plug 'Shougo/deoplete.nvim'

  " better markdown support
  Plug 'godlygeek/tabular'
  Plug 'plasticboy/vim-markdown'

  " " Rust syntax
  " Plug 'wting/rust.vim'
  " name says it all

  Plug 'Glench/Vim-Jinja2-Syntax'

  Plug 'DAddYE/soda.vim'
  Plug 'AlxHnr/clear_colors'
  Plug 'freeo/vim-kalisi'
  Plug 'altercation/vim-colors-solarized'
  Plug 'vim-scripts/navajo-night'
  Plug 'vim-scripts/navajo.vim'
  Plug 'junegunn/seoul256.vim'
  Plug 'john2x/flatui.vim'
  Plug 'zefei/cake16'
  Plug 'fxn/vim-monochrome'
  Plug 'nemesit/vim-colors-fukurokujopro'
  Plug 'vim-airline/vim-airline-themes'
  "Plug 'chriskempson/base16-vim'
call plug#end()

filetype plugin indent on
syntax on

set spell
set tabstop=2 shiftwidth=2 expandtab
"set textwidth=80
set colorcolumn=81
set formatoptions+=t

" Display tabs and trailing spaces visually
set list listchars=tab:\ \ ,trail:·

" autocompletion
set wildmode=longest,full
set wildmenu                "enable ctrl-n and ctrl-p to scroll thru matches
set wildignore=*.o,*.obj,*~ "stuff to ignore when tab completing

" nerdtree staff
let g:NERDTreeDirArrows=0
let g:nerdtree_tabs_open_on_gui_startup = 0
let g:nerdtree_tabs_open_on_console_startup = 0
set autochdir
let NERDTreeChDirMode=2
"autocmd vimenter * if !argc() | NERDTree . | NERDTreeClose | endif
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
map <C-n> :NERDTreeToggle<CR>

" colorscheme
" _gvimrc stuff
if has("gui_running")
  "set guifont=Liberation\ Mono:h10
  set guifont=Droid\ Sans\ Mono\ 10
  colorscheme soda
  set background=light
  let g:airline_theme='solarized'
  set guioptions-=m  "remove menu bar
  set guioptions-=T  "remove toolbar
  set guioptions-=r  "remove right-hand scroll bar
  set guioptions-=L  "remove left-hand scroll bar
else
  let $COLORTERM = "xterm-256color"
  set t_Co=256
  colorscheme solarized
  set background=dark
  let g:airline_theme='solarized'
endif

" disable markdown auto folding
let g:vim_markdown_folding_disabled=1

" display line numbers
set number

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Enable Nvim TUI true color
let $NVIM_TUI_ENABLE_TRUE_COLOR=1
let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1

" Make Pynvim to paste clipboard content in _edit_ mode
inoremap <S-Insert> <Esc>"+pi

if has("tnoremap")
  tnoremap <A-`> <C-\><C-n>
  tnoremap <A-h> <C-\><C-n><C-w>hi
  tnoremap <A-j> <C-\><C-n><C-w>ji
  tnoremap <A-k> <C-\><C-n><C-w>ki
  tnoremap <A-l> <C-\><C-n><C-w>li
  tnoremap <A-t> <C-\><C-n>:tabnew +terminal<cr>cd<cr>
  tnoremap <C-PageUp> <C-\><C-n><C-PageUp>
  tnoremap <C-PageDown> <C-\><C-n><C-PageDown>
  "disable terminal spell
  au TermOpen * setlocal mouse=
  au TermOpen * setlocal nospell
  au TermOpen * setlocal nocursorline
  au TermOpen * setlocal nocursorcolumn
  au TermOpen * setlocal nolist
endif

nnoremap <A-h> <C-w>h
nnoremap <A-j> <C-w>j
nnoremap <A-k> <C-w>k
nnoremap <A-l> <C-w>l
noremap  <A-t> :tabnew<cr>

set splitbelow
set splitright

set mouse=a

" Let's try neomake on rust ON by default
autocmd! BufWritePost *.rs Neomake

" rust complete integration
set hidden
" let g:racer_cmd = "/usr/local/bin/racer"
" let $RUST_SRC_PATH="/usr/local/src/rustc-nightly/src"
" autocmd FileType rust nnoremap <F3> :call RacerGoToDefinition()<CR>
" autocmd FileType rust nnoremap <S-F3> 2<C-O>
" autocmd FileType rust inoremap <C-Space> <C-x><C-o>
" autocmd FileType rust inoremap <C-@> <C-Space>

let g:deoplete#enable_at_startup = 1

" Adds Neovim Proof-of-concept debugger support
" source ~/.vim/autoload/neovim_gdb.vim

" " Adds Tagbar shortcut and Rust support
" autocmd FileType rust nnoremap <Leader>/ :TagbarToggle<CR>
" autocmd FileType rust nnoremap <Leader>. :CtrlPTag<CR>
" let g:tagbar_type_rust = {
"     \ 'ctagstype' : 'rust',
"     \ 'kinds' : [
"         \'T:types,type definitions',
"         \'f:functions,function definitions',
"         \'g:enum,enumeration names',
"         \'s:structure names',
"         \'m:modules,module names',
"         \'c:consts,static constants',
"         \'t:traits,traits',
"         \'i:impls,trait implementations',
"     \]
"     \}

